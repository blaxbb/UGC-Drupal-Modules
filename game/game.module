<?php
/**
 * @file
 * UGC Game Module
 */

require DRUPAL_ROOT . '/' . drupal_get_path('module', 'game') . '/game.db.inc';
require DRUPAL_ROOT . '/' . drupal_get_path('module', 'game') . '/game.ui.inc';
require DRUPAL_ROOT . '/' . drupal_get_path('module', 'game') . '/game.field.inc';


/**
 * Implements hook_permission().
 */
function game_permission() {
  return array(
    'edit settings' => array(
      'title' => t('Edit Game Settings'),
      'description' => t('Adjust field_game settings'),
      'restrict access' => TRUE,
    ),
    'edit players' => array(
      'title' => t("Edit Players"),
      'description' => t('Edit player properties from game module'),
      'restrict access' => TRUE,
    ),
  );
}



/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function game_game_gametype() {
  $gametype = array(
    'title' => 'Base Gametype',
    'id' => 'base_gametype',
    'description' => 'The base gametype',
    'states' => array(
      'registration closed',
      'registration open',
    ),
  );
  return $gametype;
}

/**
* Access callback: Determines if user info page is visible
*
* @param $user
*   User to check access for.
* @param $gameid
*   Game ID to check existance of.
*
* @return
*   A boolean for the accessability of the page.
*
* @see game_menu()
*/
function game_menu_access_user($user, $gameid = NULL) {

  if ($gameid == NULL || game_node_has_game(node_load($gameid))) {
    return TRUE;
  }

  return FALSE;
}

/**
* Access callback: Determines if user edit page is acessable
*
* @param $user
*   User whose page is trying to be viewed.
*
* @return
*   A boolean for the accessability of the page.
*
* @see game_menu()
*/
function game_menu_access_user_edit($user) {
  global $user;
  if ($user->uid == 1 || user_access('edit players')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines if a node has a field_game attached to it.
 *
 * @param $node
 *   The node to check for a field_game item.
 *
 * @return
 *   Boolean whether the field is attached.
 */
function game_node_has_game($node) {
  if (!isset($node->field_game) || $node->field_game == NULL) {
    return FALSE;
  }

  return TRUE;
}

/**
* Access callback: Determines if game items should be accessable.
*
*   Hide the links provided in game_menu() if there is no field_game
*   or if the user cannot access the original node.
*
* @param $user
*   User whose page is trying to be viewed.
*
* @return
*   A boolean for the accessability of the page.
*
* @see game_menu()
*/
function game_menu_access_node($node) {

  global $user;

  if (!node_access('view', $node, $user)) {
    return FALSE;
  }

  if (!game_node_has_game($node)) {
    return FALSE;
  }

  return TRUE;
}

/**
* Access callback: Determines if game settings should be accessable.
*
* @param $node
*   Node whose settings page is trying to be viewed.
*
* @return
*   A boolean for the accessability of the page.
*
* @see game_menu()
*/
function game_menu_access_settings($node) {

  global $user;

  if (!node_access('view', $node, $user)) {
    return FALSE;
  }

  if (!isset($node->field_game) || $node->field_game == NULL) {
    return FALSE;
  }

  if ($user->uid == 1 || user_access('edit settings')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Gets the field_game item from a nid/gameid.
 *
 * @param $gameid
 *   The nid or gameid to get a field_game item from.
 *
 * @return
 *   field_game item.
 */
function game_get_game($gameid) {
  $node = node_load($gameid);
  $game = field_get_items('node', $node, 'field_game');
  $game = $game[0];
  return $game;
}

/**
 * Invokes a function on a game module.
 * 
 *   Helper function which extends module_invoke by 
 *   looking up the game's module and invoking the
 *   requested function on that.
 *
 * @param $game
 *   The game whose type will be invoked.
 * @param $hook
 *   A string hook of the function to invoke
 * @param $args
 *   Any arguments will pass to the invoked function
 *
 * @return
 *   Return value of invoked function
 * @see http://api.drupal.org/api/drupal/includes!module.inc/function/module_invoke/7
 */
function game_invoke($game, $hook) {
  $args = func_get_args();
  $args[0] = game_get_module_from_gametype($args[0]['type_id']);
  return call_user_func_array('module_invoke', $args);

}

/**
 * Creates a randomized alphanumeric id.
 * 
 * @param $length
 *   The length of the ID to create.
 * @param $safechars
 *   Remove similar looking characters from the randomization.
 *   
 * @return
 *   String of randomized ID
 * 
 */
function _game_generate_id($length, $chars) {

  $genid = '';

  for ($i = 0; $i < $length; $i++) {
    $genid .= $chars[mt_rand(0, strlen($chars) -1)];
  }

  return $genid;
}

function game_generate_id($length, $game = NULL) {
  $allchars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  if($game == null)
  {
    return _game_generate_id($length, $allchars);
  }
  
  $complete = FALSE;
  $iterations = 0;
  while($complete == FALSE && $iterations < 10) {
    $iterations++;
    $id = _game_generate_id($length, $allchars);
    if(game_invoke($game, 'game_new_id_is_valid', $game, $id)) {
      drupal_set_message('ID generated in ' . $iterations . ' iterations.');
      return($id);
    }
  }
  drupal_set_message('ID Failed to generate in ' . $iterations . ' iterations.', 'error');
  return FALSE;
}

function game_generate_safechars_id($length, $game = NULL) {

}
